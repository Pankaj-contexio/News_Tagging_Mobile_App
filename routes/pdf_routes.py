from flask import Blueprint, render_template, send_file, jsonify, request, session, Response, current_app
import os
from io import BytesIO
from xhtml2pdf import pisa
from bson import ObjectId
from models import social_collection, news_collection
from pdf2docx import Converter
import tempfile
from datetime import datetime
import requests
import base64

from routes.tracking import track_action

pdf_bp = Blueprint('pdf', __name__)

def fetch_image_base64(url, timeout=10):
    try:
        response = requests.get(url, timeout=timeout, verify=False)  # verify=False for SSL issues
        response.raise_for_status()
        content_type = response.headers['Content-Type']
        base64_data = base64.b64encode(response.content).decode('utf-8')
        return f"data:{content_type};base64,{base64_data}"
    except Exception as e:
        print(f"Error fetching image {url}: {str(e)}")
        return None  # Return None to indicate failure
def generate_report_html(data, username, company):
    post_ids = data.get("post_ids", [])
    filters = data.get("filters", {})
    # date_range = data.get("dateRange", None)
    search_query = data.get("searchQuery", None)

    project_name = data.get("projectName", "Report(Project)")  # Default to NEWS if project name is missing
    project_id = data.get("project_id", None)

    try:
        project_name = project_name.split("(")[0].strip()
    except:
        project_name = project_name

    if not post_ids:
        return jsonify({"success": False, "message": "No posts selected"}), 400

        # Convert post_ids to ObjectId and fetch from database
    try:
        object_ids = [ObjectId(post_id) for post_id in post_ids]
        social_posts = list(social_collection.find({"_id": {"$in": object_ids}}))
        news_posts = list(news_collection.find({"_id": {"$in": object_ids}}))
        posts = social_posts + news_posts
    except Exception as e:
        return jsonify({"success": False, "message": f"Error fetching posts: {str(e)}"}), 500

    if not posts:
        return jsonify({"success": False, "message": "No matching posts found"}), 404

    # Generate HTML content for the PDF
    pdf_html = """
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body { font-family: 'DejaVu Sans', Arial, sans-serif; }
            h1 { color: #333; text-align: center; font-size: 24px;}
            h2 { color: #333; font-size: 16px; margin-bottom: 5px; text-align: center; }
            h3 { color: #333; font-size: 18px; margin-bottom: 5px; }
            .header { margin-bottom: 40px; }
            .header span { display: block; margin-bottom: 5px; }
            .header img { text-align: center; font-size: 24px;}
            .post { margin-bottom: 40px; }
            .content { margin-top: 10px; font-size: 14px; line-height: 1.5; }
            .highlight { background-color: yellow; } /* Highlighted text */
            .notes { margin-top: 0px; padding: 0px;  margin: 0px;}
            ul { padding-left: 20px; margin: 0px; }
            li { margin: 0px; }
        </style>
    </head>
    <body>
    """

    # Add header information
    pdf_html += f"""
    <div class="header">
        <img src="..\static\images\Foresight logo.jpg" style="width: 150px; height: auto; display: block; margin: 0 auto;">
        <h1><strong>{project_name}</strong></h1>
        <h2><strong>Generated By:</strong> {username}</h2>
        {"<span><strong>Search Query:</strong> " + search_query + "</span>" if search_query else ""}
        {"<span><strong>Country Filter:</strong> " + filters.get('country') + "</span>" if filters.get('country') and filters.get('country') != "None" else ""}
        {"<span><strong>Site Filter:</strong> " + filters.get('site') + "</span>" if filters.get('site') and filters.get('site') != "None" else ""}
        {"<span><strong>Person Filter:</strong> " + filters.get('person') + "</span>" if filters.get('person') and filters.get('person') != "None" else ""}
        {"<span><strong>Sector:</strong> " + filters.get('sector') + "</span>" if filters.get('sector') and filters.get('sector') != "None" else ""}
        {"<span><strong>Publication:</strong> " + filters.get('publisian') + "</span>" if filters.get('publisian') and filters.get('publisian') != "None" else ""}
    </div>
    <hr>
    """

    # Add post data
    for post in posts:
        
        if project_id:
            try:
                content_data = post['editedContent'][company][username].get(project_id)[0]
            except Exception:
                content_data = post.get('content', 'No content available')
        else:
            qc_done_user = post.get(company, {}).get('QC_Done', {}).get('user')
            edited = post.get('editedContent', {}).get(company, {}).get(username, {}).get(username)

            if qc_done_user == username and edited:
                content_data = edited[0]
            else:
                content_data = post.get('content', 'No content available')
        title = post.get('title', None)
        if not title:
            title = (post.get("name", ""))

        publishdate = post.get('post_date', None)
        if not publishdate:
            publishdate = post.get('published_date', 'No date available')
        publishdate = str(publishdate).split(' ')[0]
        dt = datetime.strptime(publishdate, "%Y-%m-%d")

        written_by = post.get('news_at', None)
        if not written_by:
            written_by = post.get('name', "")
        # Format to desired output
        publishdate = dt.strftime("%d-%m-%Y")
        notes_html = "<ul>" + "".join(f"<li>{note}</li>" for note in post.get("notes", {}).get(username, [])) + "</ul>"
        observations_html = "<ul>" + "".join(
            f"<li>{observation}</li>" for observation in post.get("observations", {}).get(username, [])) + "</ul>"
        insights_html = "<ul>" + "".join(
            f"<li>{insight}</li>" for insight in post.get("insights", {}).get(username, [])) + "</ul>"

        onlineimages = post.get('image', [])
        uploadedimages = []
        postid = str(post.get('_id'))

        if project_id:
            try:
                uploadedimages = post.get('addedImages', {}).get(company, {}).get(project_id, {}).get(postid, [])
            except Exception:
                uploadedimages = []
        
        # Normalize onlineimages into the same structure as uploadedimages
        normalized_onlineimages = [
            {"path": img, "description": ""}
            for img in onlineimages
            if img and img.strip() != "" and img != "Not Available" and img != "n/a"
        ]
        
        # Ensure uploadedimages is also filtered
        normalized_uploadedimages = [
            img for img in uploadedimages
            if isinstance(img, dict) and img.get("path") and img["path"].strip() != "" and img[
                "path"] != "Not Available" and img["path"] != "n/a"
        ]

        # Combine both
        images = normalized_onlineimages + normalized_uploadedimages

        # Build HTML
        if images:
            image_html = ""
            for i, img in enumerate(images):
                img_src = img["path"]

                # Convert HTTP/HTTPS images to Base64
                if img_src.startswith(('http://', 'https://')):
                    base64_src = fetch_image_base64(img_src)
                    if base64_src:
                        img_src = base64_src

                if i % 5 == 0:
                    if i != 0:
                        image_html += "</tr>"  # Close previous row
                    image_html += "<tr>"  # Start a new row

                image_html += f'''
                    <td style="text-align: center; padding: 10px;">
                        <img src="{img_src}" alt="Full Preview" style="width:150px; height: 150px; object-fit: cover; cursor: pointer;">
                        {f'<p style="margin-top: 4px; font-size: 12px;">{img["description"]}</p>' if img.get("description") else ""}
                    </td>
                '''

            # Close the last row if not already closed
            if len(images) % 5 != 0:
                image_html += "</tr>"


        else:
            image_html = ""

        pdf_html += f"""
        <div class="post">
            <p><strong>Date:</strong> {publishdate}</p>
            <h3>{title}</h3>
            <div class="written_by">
                <strong>Written By:</strong>
                {written_by}
            </div>
            <div class="content">{content_data}</div>
            <table style="width: 100%; border-collapse: collapse;">
                    {image_html}
            </table>
            
            <div class="notes">
                {"<strong>Notes:</strong>" if len(post.get("notes", {}).get(username, [])) > 0 else ""}
                {notes_html}
            </div>
            <div class="observations">
                {"<strong>Observations:</strong>" if len(post.get("observations", {}).get(username, [])) > 0 else ""}
                {observations_html}
            </div>
            <div class="insights">
                {"<strong>Insights:</strong>" if len(post.get("insights", {}).get(username, [])) > 0 else ""}
                {insights_html}
            </div>

        </div>
        <hr>
        """

    pdf_html += "</body></html>"
    return pdf_html

def create_pdf_bytes(html_content):
    """Generate PDF bytes from HTML content"""
    pdf = BytesIO()
    pisa_status = pisa.CreatePDF(BytesIO(html_content.encode('utf-8')), dest=pdf)
    if pisa_status.err:
        return None
    pdf.seek(0)
    return pdf

@pdf_bp.route('/api/download-doc', methods=['POST'])
def download_doc():
    username = session.get('username')
    company = session.get('company')
    if not username:
        return jsonify({"success": False, "message": "User not logged in"}), 401

    data = request.json

    track_action('report_downloaded', {
        'format': 'docx',
        'post_count': len(data.get('post_ids', [])),
        'project_id': data.get('project_id')
    })

    # Initialize variables for cleanup
    pdf_path = None
    docx_path = None
    try:
        # Generate HTML content
        html_content = generate_report_html(data, username, company)

        # Generate PDF in memory
        pdf_buffer = create_pdf_bytes(html_content)
        if not pdf_buffer:
            return jsonify({"success": False, "message": "Error generating PDF"}), 500

        # Create temporary files
        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp_pdf:
            tmp_pdf.write(pdf_buffer.getvalue())
            pdf_path = tmp_pdf.name

        with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as tmp_docx:
            docx_path = tmp_docx.name

        # Convert PDF to DOCX
        cv = Converter(pdf_path)
        cv.convert(docx_path)
        cv.close()

        # Read DOCX content
        with open(docx_path, "rb") as docx_file:
            docx_content = BytesIO(docx_file.read())
        current_app.logger.info(f"Generated DOCX file at {docx_path} by {username} for company {company}")
        return Response(
            docx_content,
            mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            headers={"Content-Disposition": "attachment; filename=selected_posts.docx"}
        )

    finally:
        # Clean up temporary files
        if pdf_path and os.path.exists(pdf_path):
            os.unlink(pdf_path)
        if docx_path and os.path.exists(docx_path):
            os.unlink(docx_path)

@pdf_bp.route('/api/download-pdf', methods=['POST'])
def create_pdf():
    """Generate and download a PDF containing selected posts and header information."""
    username = session.get('username')
    company = session.get('company')
    if not username:
        return jsonify({"success": False, "message": "User not logged in"}), 401

    data = request.json

    track_action('report_downloaded', {
        'format': 'pdf',
        'post_count': len(data.get('post_ids', [])),
        'project_id': data.get('project_id')
    })
    
    project_name = data.get("projectName", "Project: Report")  # Default to NEWS if project name is missing
    
    try:
        project_name = project_name.split(":")[1].strip()
    except:
        project_name = project_name

    try:
        # Generate HTML content
        html_content = generate_report_html(data, username, company)

        # Convert to PDF
        pdf =create_pdf_bytes(html_content)
        current_app.logger.info(f"Generated PDF file by {username} for company {company}")
        return Response(
            pdf,
            mimetype="application/pdf",
            headers={"Content-Disposition": "attachment; filename=selected_posts.pdf"}
        )

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500
